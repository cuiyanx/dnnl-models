// Generated file (from: quantize_quant8_signed.mod.py). Do not edit
describe('CTS', function() {
  const assert = chai.assert;
  const nn = navigator.ml.getNeuralNetworkContext();

  it('check result for Quantize quant8 signed example-1', async function() {
    // For 'Quantize quant8 signed' example: examples_float32
    let model = await nn.createModel(options);
    let operandIndex = 0;

    let input0_value = [-10.0, -9.933110367892976, -9.866220735785953, -9.799331103678929, -9.732441471571907, -9.665551839464882, -9.59866220735786, -9.531772575250836, -9.464882943143813, -9.397993311036789, -9.331103678929766, -9.264214046822742, -9.19732441471572, -9.130434782608695, -9.063545150501673, -8.996655518394649, -8.929765886287626, -8.862876254180602, -8.79598662207358, -8.729096989966555, -8.662207357859533, -8.595317725752508, -8.528428093645484, -8.461538461538462, -8.39464882943144, -8.327759197324415, -8.26086956521739, -8.193979933110368, -8.127090301003344, -8.060200668896321, -7.993311036789297, -7.926421404682275, -7.8595317725752505, -7.792642140468228, -7.725752508361204, -7.658862876254181, -7.591973244147157, -7.5250836120401345, -7.45819397993311, -7.391304347826087, -7.3244147157190636, -7.25752508361204, -7.190635451505017, -7.1237458193979935, -7.05685618729097, -6.989966555183947, -6.923076923076923, -6.8561872909699, -6.789297658862877, -6.722408026755852, -6.65551839464883, -6.588628762541806, -6.521739130434783, -6.454849498327759, -6.387959866220736, -6.321070234113712, -6.25418060200669, -6.187290969899665, -6.120401337792643, -6.053511705685619, -5.986622073578595, -5.919732441471572, -5.852842809364549, -5.785953177257525, -5.719063545150502, -5.6521739130434785, -5.585284280936455, -5.518394648829432, -5.451505016722408, -5.384615384615385, -5.317725752508362, -5.250836120401338, -5.183946488294315, -5.117056856187292, -5.050167224080268, -4.983277591973244, -4.916387959866221, -4.849498327759197, -4.782608695652174, -4.7157190635451505, -4.648829431438127, -4.581939799331104, -4.51505016722408, -4.448160535117057, -4.381270903010034, -4.31438127090301, -4.247491638795987, -4.1806020066889635, -4.11371237458194, -4.046822742474917, -3.9799331103678934, -3.91304347826087, -3.8461538461538467, -3.7792642140468233, -3.7123745819398, -3.6454849498327766, -3.5785953177257532, -3.511705685618729, -3.4448160535117056, -3.3779264214046822, -3.311036789297659, -3.2441471571906355, -3.177257525083612, -3.1103678929765888, -3.0434782608695654, -2.976588628762542, -2.9096989966555187, -2.8428093645484953, -2.775919732441472, -2.7090301003344486, -2.642140468227425, -2.575250836120402, -2.5083612040133785, -2.441471571906355, -2.3745819397993317, -2.3076923076923084, -2.240802675585285, -2.1739130434782616, -2.1070234113712374, -2.040133779264214, -1.9732441471571907, -1.9063545150501682, -1.839464882943144, -1.7725752508361214, -1.7056856187290972, -1.6387959866220747, -1.5719063545150505, -1.505016722408028, -1.4381270903010037, -1.3712374581939795, -1.304347826086957, -1.2374581939799327, -1.1705685618729103, -1.103678929765886, -1.0367892976588635, -0.9698996655518393, -0.9030100334448168, -0.8361204013377925, -0.76923076923077, -0.7023411371237458, -0.6354515050167233, -0.5685618729096991, -0.5016722408026766, -0.43478260869565233, -0.36789297658862985, -0.3010033444816056, -0.23411371237458312, -0.16722408026755886, -0.10033444816053638, -0.03344481605351213, 0.03344481605351213, 0.1003344481605346, 0.16722408026755886, 0.23411371237458134, 0.3010033444816056, 0.3678929765886281, 0.43478260869565233, 0.5016722408026748, 0.5685618729096991, 0.6354515050167215, 0.7023411371237458, 0.7692307692307683, 0.8361204013377925, 0.903010033444815, 0.9698996655518393, 1.0367892976588617, 1.103678929765886, 1.1705685618729085, 1.2374581939799327, 1.3043478260869552, 1.3712374581939795, 1.4381270903010037, 1.5050167224080262, 1.5719063545150505, 1.638795986622073, 1.7056856187290972, 1.7725752508361197, 1.839464882943144, 1.9063545150501664, 1.9732441471571907, 2.040133779264213, 2.1070234113712374, 2.17391304347826, 2.240802675585284, 2.3076923076923066, 2.374581939799331, 2.4414715719063533, 2.5083612040133776, 2.5752508361204, 2.6421404682274243, 2.709030100334447, 2.775919732441471, 2.8428093645484935, 2.909698996655518, 2.976588628762542, 3.0434782608695645, 3.1103678929765888, 3.1772575250836113, 3.2441471571906355, 3.311036789297658, 3.3779264214046822, 3.4448160535117047, 3.511705685618729, 3.5785953177257515, 3.6454849498327757, 3.712374581939798, 3.7792642140468224, 3.846153846153845, 3.913043478260869, 3.9799331103678917, 4.046822742474916, 4.113712374581938, 4.180602006688963, 4.247491638795985, 4.314381270903009, 4.381270903010034, 4.448160535117056, 4.51505016722408, 4.581939799331103, 4.648829431438127, 4.71571906354515, 4.782608695652174, 4.849498327759196, 4.916387959866221, 4.983277591973243, 5.050167224080267, 5.11705685618729, 5.183946488294314, 5.2508361204013365, 5.317725752508361, 5.384615384615383, 5.4515050167224075, 5.51839464882943, 5.585284280936454, 5.652173913043477, 5.719063545150501, 5.785953177257525, 5.852842809364548, 5.919732441471572, 5.986622073578594, 6.053511705685619, 6.120401337792643, 6.187290969899664, 6.254180602006688, 6.321070234113712, 6.387959866220736, 6.454849498327757, 6.521739130434781, 6.588628762541806, 6.65551839464883, 6.722408026755851, 6.789297658862875, 6.856187290969899, 6.923076923076923, 6.989966555183944, 7.056856187290968, 7.123745819397993, 7.190635451505017, 7.257525083612041, 7.324414715719062, 7.391304347826086, 7.45819397993311, 7.5250836120401345, 7.591973244147155, 7.6588628762541795, 7.725752508361204, 7.792642140468228, 7.859531772575249, 7.926421404682273, 7.993311036789297, 8.060200668896321, 8.127090301003342, 8.193979933110366, 8.26086956521739, 8.327759197324415, 8.394648829431436, 8.46153846153846, 8.528428093645484, 8.595317725752508, 8.662207357859533, 8.729096989966553, 8.795986622073578, 8.862876254180602, 8.929765886287626, 8.996655518394647, 9.063545150501671, 9.130434782608695, 9.19732441471572, 9.26421404682274, 9.331103678929765, 9.397993311036789, 9.464882943143813, 9.531772575250834, 9.598662207357858, 9.665551839464882, 9.732441471571907, 9.799331103678927, 9.866220735785951, 9.933110367892976, 10.0];
    let output0_expect

    let type0 = {type: nn.TENSOR_FLOAT32, dimensions: [300]};
    let type0_length = product(type0.dimensions);
    let type14 = {type: nn.TENSOR_QUANT8_ASYMM_SIGNED, dimensions: [300], scale: 1.0, zeroPoint: -128};
    let type14_length = product(type14.dimensions);

    let input0 = operandIndex++;
    model.addOperand(type0);
    let output0 = operandIndex++;
    model.addOperand(type14);

    model.addOperation(nn.QUANTIZE, [input0], [output0]);

    model.identifyInputsAndOutputs([input0], [output0]);
    await model.finish();

    let compilation = await model.createCompilation();
    compilation.setPreference(getPreferenceCode(options.prefer));
    await compilation.finish();

    let execution = await compilation.createExecution();

    let input0_input = new Float32Array(input0_value);
    execution.setInput(0, input0_input);
    let output0_output = new Int8Array(type14_length);
    execution.setOutput(0, output0_output);

    await execution.startCompute();

    for (let i = 0; i < type14_length; ++i) {
      assert.isTrue(almostEqualCTSQuant8(output0_output[i], output0_expect[i]));
    }
  });

  it('check result for Quantize quant8 signed example-2', async function() {
    // For 'Quantize quant8 signed' example: examples_float32_2
    let model = await nn.createModel(options);
    let operandIndex = 0;

    let input01_value = [-10.0, -9.933110367892976, -9.866220735785953, -9.799331103678929, -9.732441471571907, -9.665551839464882, -9.59866220735786, -9.531772575250836, -9.464882943143813, -9.397993311036789, -9.331103678929766, -9.264214046822742, -9.19732441471572, -9.130434782608695, -9.063545150501673, -8.996655518394649, -8.929765886287626, -8.862876254180602, -8.79598662207358, -8.729096989966555, -8.662207357859533, -8.595317725752508, -8.528428093645484, -8.461538461538462, -8.39464882943144, -8.327759197324415, -8.26086956521739, -8.193979933110368, -8.127090301003344, -8.060200668896321, -7.993311036789297, -7.926421404682275, -7.8595317725752505, -7.792642140468228, -7.725752508361204, -7.658862876254181, -7.591973244147157, -7.5250836120401345, -7.45819397993311, -7.391304347826087, -7.3244147157190636, -7.25752508361204, -7.190635451505017, -7.1237458193979935, -7.05685618729097, -6.989966555183947, -6.923076923076923, -6.8561872909699, -6.789297658862877, -6.722408026755852, -6.65551839464883, -6.588628762541806, -6.521739130434783, -6.454849498327759, -6.387959866220736, -6.321070234113712, -6.25418060200669, -6.187290969899665, -6.120401337792643, -6.053511705685619, -5.986622073578595, -5.919732441471572, -5.852842809364549, -5.785953177257525, -5.719063545150502, -5.6521739130434785, -5.585284280936455, -5.518394648829432, -5.451505016722408, -5.384615384615385, -5.317725752508362, -5.250836120401338, -5.183946488294315, -5.117056856187292, -5.050167224080268, -4.983277591973244, -4.916387959866221, -4.849498327759197, -4.782608695652174, -4.7157190635451505, -4.648829431438127, -4.581939799331104, -4.51505016722408, -4.448160535117057, -4.381270903010034, -4.31438127090301, -4.247491638795987, -4.1806020066889635, -4.11371237458194, -4.046822742474917, -3.9799331103678934, -3.91304347826087, -3.8461538461538467, -3.7792642140468233, -3.7123745819398, -3.6454849498327766, -3.5785953177257532, -3.511705685618729, -3.4448160535117056, -3.3779264214046822, -3.311036789297659, -3.2441471571906355, -3.177257525083612, -3.1103678929765888, -3.0434782608695654, -2.976588628762542, -2.9096989966555187, -2.8428093645484953, -2.775919732441472, -2.7090301003344486, -2.642140468227425, -2.575250836120402, -2.5083612040133785, -2.441471571906355, -2.3745819397993317, -2.3076923076923084, -2.240802675585285, -2.1739130434782616, -2.1070234113712374, -2.040133779264214, -1.9732441471571907, -1.9063545150501682, -1.839464882943144, -1.7725752508361214, -1.7056856187290972, -1.6387959866220747, -1.5719063545150505, -1.505016722408028, -1.4381270903010037, -1.3712374581939795, -1.304347826086957, -1.2374581939799327, -1.1705685618729103, -1.103678929765886, -1.0367892976588635, -0.9698996655518393, -0.9030100334448168, -0.8361204013377925, -0.76923076923077, -0.7023411371237458, -0.6354515050167233, -0.5685618729096991, -0.5016722408026766, -0.43478260869565233, -0.36789297658862985, -0.3010033444816056, -0.23411371237458312, -0.16722408026755886, -0.10033444816053638, -0.03344481605351213, 0.03344481605351213, 0.1003344481605346, 0.16722408026755886, 0.23411371237458134, 0.3010033444816056, 0.3678929765886281, 0.43478260869565233, 0.5016722408026748, 0.5685618729096991, 0.6354515050167215, 0.7023411371237458, 0.7692307692307683, 0.8361204013377925, 0.903010033444815, 0.9698996655518393, 1.0367892976588617, 1.103678929765886, 1.1705685618729085, 1.2374581939799327, 1.3043478260869552, 1.3712374581939795, 1.4381270903010037, 1.5050167224080262, 1.5719063545150505, 1.638795986622073, 1.7056856187290972, 1.7725752508361197, 1.839464882943144, 1.9063545150501664, 1.9732441471571907, 2.040133779264213, 2.1070234113712374, 2.17391304347826, 2.240802675585284, 2.3076923076923066, 2.374581939799331, 2.4414715719063533, 2.5083612040133776, 2.5752508361204, 2.6421404682274243, 2.709030100334447, 2.775919732441471, 2.8428093645484935, 2.909698996655518, 2.976588628762542, 3.0434782608695645, 3.1103678929765888, 3.1772575250836113, 3.2441471571906355, 3.311036789297658, 3.3779264214046822, 3.4448160535117047, 3.511705685618729, 3.5785953177257515, 3.6454849498327757, 3.712374581939798, 3.7792642140468224, 3.846153846153845, 3.913043478260869, 3.9799331103678917, 4.046822742474916, 4.113712374581938, 4.180602006688963, 4.247491638795985, 4.314381270903009, 4.381270903010034, 4.448160535117056, 4.51505016722408, 4.581939799331103, 4.648829431438127, 4.71571906354515, 4.782608695652174, 4.849498327759196, 4.916387959866221, 4.983277591973243, 5.050167224080267, 5.11705685618729, 5.183946488294314, 5.2508361204013365, 5.317725752508361, 5.384615384615383, 5.4515050167224075, 5.51839464882943, 5.585284280936454, 5.652173913043477, 5.719063545150501, 5.785953177257525, 5.852842809364548, 5.919732441471572, 5.986622073578594, 6.053511705685619, 6.120401337792643, 6.187290969899664, 6.254180602006688, 6.321070234113712, 6.387959866220736, 6.454849498327757, 6.521739130434781, 6.588628762541806, 6.65551839464883, 6.722408026755851, 6.789297658862875, 6.856187290969899, 6.923076923076923, 6.989966555183944, 7.056856187290968, 7.123745819397993, 7.190635451505017, 7.257525083612041, 7.324414715719062, 7.391304347826086, 7.45819397993311, 7.5250836120401345, 7.591973244147155, 7.6588628762541795, 7.725752508361204, 7.792642140468228, 7.859531772575249, 7.926421404682273, 7.993311036789297, 8.060200668896321, 8.127090301003342, 8.193979933110366, 8.26086956521739, 8.327759197324415, 8.394648829431436, 8.46153846153846, 8.528428093645484, 8.595317725752508, 8.662207357859533, 8.729096989966553, 8.795986622073578, 8.862876254180602, 8.929765886287626, 8.996655518394647, 9.063545150501671, 9.130434782608695, 9.19732441471572, 9.26421404682274, 9.331103678929765, 9.397993311036789, 9.464882943143813, 9.531772575250834, 9.598662207357858, 9.665551839464882, 9.732441471571907, 9.799331103678927, 9.866220735785951, 9.933110367892976, 10.0];
    let output01_expect

    let type0 = {type: nn.TENSOR_FLOAT32, dimensions: [300]};
    let type0_length = product(type0.dimensions);
    let type15 = {type: nn.TENSOR_QUANT8_ASYMM_SIGNED, dimensions: [300], scale: 1.0, zeroPoint: -127};
    let type15_length = product(type15.dimensions);

    let input01 = operandIndex++;
    model.addOperand(type0);
    let output01 = operandIndex++;
    model.addOperand(type15);

    model.addOperation(nn.QUANTIZE, [input01], [output01]);

    model.identifyInputsAndOutputs([input01], [output01]);
    await model.finish();

    let compilation = await model.createCompilation();
    compilation.setPreference(getPreferenceCode(options.prefer));
    await compilation.finish();

    let execution = await compilation.createExecution();

    let input01_input = new Float32Array(input01_value);
    execution.setInput(0, input01_input);
    let output01_output = new Int8Array(type15_length);
    execution.setOutput(0, output01_output);

    await execution.startCompute();

    for (let i = 0; i < type15_length; ++i) {
      assert.isTrue(almostEqualCTSQuant8(output01_output[i], output01_expect[i]));
    }
  });

  it('check result for Quantize quant8 signed example-3', async function() {
    // For 'Quantize quant8 signed' example: examples_float32_3
    let model = await nn.createModel(options);
    let operandIndex = 0;

    let input02_value = [-10.0, -9.933110367892976, -9.866220735785953, -9.799331103678929, -9.732441471571907, -9.665551839464882, -9.59866220735786, -9.531772575250836, -9.464882943143813, -9.397993311036789, -9.331103678929766, -9.264214046822742, -9.19732441471572, -9.130434782608695, -9.063545150501673, -8.996655518394649, -8.929765886287626, -8.862876254180602, -8.79598662207358, -8.729096989966555, -8.662207357859533, -8.595317725752508, -8.528428093645484, -8.461538461538462, -8.39464882943144, -8.327759197324415, -8.26086956521739, -8.193979933110368, -8.127090301003344, -8.060200668896321, -7.993311036789297, -7.926421404682275, -7.8595317725752505, -7.792642140468228, -7.725752508361204, -7.658862876254181, -7.591973244147157, -7.5250836120401345, -7.45819397993311, -7.391304347826087, -7.3244147157190636, -7.25752508361204, -7.190635451505017, -7.1237458193979935, -7.05685618729097, -6.989966555183947, -6.923076923076923, -6.8561872909699, -6.789297658862877, -6.722408026755852, -6.65551839464883, -6.588628762541806, -6.521739130434783, -6.454849498327759, -6.387959866220736, -6.321070234113712, -6.25418060200669, -6.187290969899665, -6.120401337792643, -6.053511705685619, -5.986622073578595, -5.919732441471572, -5.852842809364549, -5.785953177257525, -5.719063545150502, -5.6521739130434785, -5.585284280936455, -5.518394648829432, -5.451505016722408, -5.384615384615385, -5.317725752508362, -5.250836120401338, -5.183946488294315, -5.117056856187292, -5.050167224080268, -4.983277591973244, -4.916387959866221, -4.849498327759197, -4.782608695652174, -4.7157190635451505, -4.648829431438127, -4.581939799331104, -4.51505016722408, -4.448160535117057, -4.381270903010034, -4.31438127090301, -4.247491638795987, -4.1806020066889635, -4.11371237458194, -4.046822742474917, -3.9799331103678934, -3.91304347826087, -3.8461538461538467, -3.7792642140468233, -3.7123745819398, -3.6454849498327766, -3.5785953177257532, -3.511705685618729, -3.4448160535117056, -3.3779264214046822, -3.311036789297659, -3.2441471571906355, -3.177257525083612, -3.1103678929765888, -3.0434782608695654, -2.976588628762542, -2.9096989966555187, -2.8428093645484953, -2.775919732441472, -2.7090301003344486, -2.642140468227425, -2.575250836120402, -2.5083612040133785, -2.441471571906355, -2.3745819397993317, -2.3076923076923084, -2.240802675585285, -2.1739130434782616, -2.1070234113712374, -2.040133779264214, -1.9732441471571907, -1.9063545150501682, -1.839464882943144, -1.7725752508361214, -1.7056856187290972, -1.6387959866220747, -1.5719063545150505, -1.505016722408028, -1.4381270903010037, -1.3712374581939795, -1.304347826086957, -1.2374581939799327, -1.1705685618729103, -1.103678929765886, -1.0367892976588635, -0.9698996655518393, -0.9030100334448168, -0.8361204013377925, -0.76923076923077, -0.7023411371237458, -0.6354515050167233, -0.5685618729096991, -0.5016722408026766, -0.43478260869565233, -0.36789297658862985, -0.3010033444816056, -0.23411371237458312, -0.16722408026755886, -0.10033444816053638, -0.03344481605351213, 0.03344481605351213, 0.1003344481605346, 0.16722408026755886, 0.23411371237458134, 0.3010033444816056, 0.3678929765886281, 0.43478260869565233, 0.5016722408026748, 0.5685618729096991, 0.6354515050167215, 0.7023411371237458, 0.7692307692307683, 0.8361204013377925, 0.903010033444815, 0.9698996655518393, 1.0367892976588617, 1.103678929765886, 1.1705685618729085, 1.2374581939799327, 1.3043478260869552, 1.3712374581939795, 1.4381270903010037, 1.5050167224080262, 1.5719063545150505, 1.638795986622073, 1.7056856187290972, 1.7725752508361197, 1.839464882943144, 1.9063545150501664, 1.9732441471571907, 2.040133779264213, 2.1070234113712374, 2.17391304347826, 2.240802675585284, 2.3076923076923066, 2.374581939799331, 2.4414715719063533, 2.5083612040133776, 2.5752508361204, 2.6421404682274243, 2.709030100334447, 2.775919732441471, 2.8428093645484935, 2.909698996655518, 2.976588628762542, 3.0434782608695645, 3.1103678929765888, 3.1772575250836113, 3.2441471571906355, 3.311036789297658, 3.3779264214046822, 3.4448160535117047, 3.511705685618729, 3.5785953177257515, 3.6454849498327757, 3.712374581939798, 3.7792642140468224, 3.846153846153845, 3.913043478260869, 3.9799331103678917, 4.046822742474916, 4.113712374581938, 4.180602006688963, 4.247491638795985, 4.314381270903009, 4.381270903010034, 4.448160535117056, 4.51505016722408, 4.581939799331103, 4.648829431438127, 4.71571906354515, 4.782608695652174, 4.849498327759196, 4.916387959866221, 4.983277591973243, 5.050167224080267, 5.11705685618729, 5.183946488294314, 5.2508361204013365, 5.317725752508361, 5.384615384615383, 5.4515050167224075, 5.51839464882943, 5.585284280936454, 5.652173913043477, 5.719063545150501, 5.785953177257525, 5.852842809364548, 5.919732441471572, 5.986622073578594, 6.053511705685619, 6.120401337792643, 6.187290969899664, 6.254180602006688, 6.321070234113712, 6.387959866220736, 6.454849498327757, 6.521739130434781, 6.588628762541806, 6.65551839464883, 6.722408026755851, 6.789297658862875, 6.856187290969899, 6.923076923076923, 6.989966555183944, 7.056856187290968, 7.123745819397993, 7.190635451505017, 7.257525083612041, 7.324414715719062, 7.391304347826086, 7.45819397993311, 7.5250836120401345, 7.591973244147155, 7.6588628762541795, 7.725752508361204, 7.792642140468228, 7.859531772575249, 7.926421404682273, 7.993311036789297, 8.060200668896321, 8.127090301003342, 8.193979933110366, 8.26086956521739, 8.327759197324415, 8.394648829431436, 8.46153846153846, 8.528428093645484, 8.595317725752508, 8.662207357859533, 8.729096989966553, 8.795986622073578, 8.862876254180602, 8.929765886287626, 8.996655518394647, 9.063545150501671, 9.130434782608695, 9.19732441471572, 9.26421404682274, 9.331103678929765, 9.397993311036789, 9.464882943143813, 9.531772575250834, 9.598662207357858, 9.665551839464882, 9.732441471571907, 9.799331103678927, 9.866220735785951, 9.933110367892976, 10.0];
    let output02_expect

    let type0 = {type: nn.TENSOR_FLOAT32, dimensions: [300]};
    let type0_length = product(type0.dimensions);
    let type16 = {type: nn.TENSOR_QUANT8_ASYMM_SIGNED, dimensions: [300], scale: 0.01, zeroPoint: -8};
    let type16_length = product(type16.dimensions);

    let input02 = operandIndex++;
    model.addOperand(type0);
    let output02 = operandIndex++;
    model.addOperand(type16);

    model.addOperation(nn.QUANTIZE, [input02], [output02]);

    model.identifyInputsAndOutputs([input02], [output02]);
    await model.finish();

    let compilation = await model.createCompilation();
    compilation.setPreference(getPreferenceCode(options.prefer));
    await compilation.finish();

    let execution = await compilation.createExecution();

    let input02_input = new Float32Array(input02_value);
    execution.setInput(0, input02_input);
    let output02_output = new Int8Array(type16_length);
    execution.setOutput(0, output02_output);

    await execution.startCompute();

    for (let i = 0; i < type16_length; ++i) {
      assert.isTrue(almostEqualCTSQuant8(output02_output[i], output02_expect[i]));
    }
  });

  it('check result for Quantize quant8 signed example-4', async function() {
    // For 'Quantize quant8 signed' example: examples_float32_4
    let model = await nn.createModel(options);
    let operandIndex = 0;

    let input03_value = [-10.0, -9.933110367892976, -9.866220735785953, -9.799331103678929, -9.732441471571907, -9.665551839464882, -9.59866220735786, -9.531772575250836, -9.464882943143813, -9.397993311036789, -9.331103678929766, -9.264214046822742, -9.19732441471572, -9.130434782608695, -9.063545150501673, -8.996655518394649, -8.929765886287626, -8.862876254180602, -8.79598662207358, -8.729096989966555, -8.662207357859533, -8.595317725752508, -8.528428093645484, -8.461538461538462, -8.39464882943144, -8.327759197324415, -8.26086956521739, -8.193979933110368, -8.127090301003344, -8.060200668896321, -7.993311036789297, -7.926421404682275, -7.8595317725752505, -7.792642140468228, -7.725752508361204, -7.658862876254181, -7.591973244147157, -7.5250836120401345, -7.45819397993311, -7.391304347826087, -7.3244147157190636, -7.25752508361204, -7.190635451505017, -7.1237458193979935, -7.05685618729097, -6.989966555183947, -6.923076923076923, -6.8561872909699, -6.789297658862877, -6.722408026755852, -6.65551839464883, -6.588628762541806, -6.521739130434783, -6.454849498327759, -6.387959866220736, -6.321070234113712, -6.25418060200669, -6.187290969899665, -6.120401337792643, -6.053511705685619, -5.986622073578595, -5.919732441471572, -5.852842809364549, -5.785953177257525, -5.719063545150502, -5.6521739130434785, -5.585284280936455, -5.518394648829432, -5.451505016722408, -5.384615384615385, -5.317725752508362, -5.250836120401338, -5.183946488294315, -5.117056856187292, -5.050167224080268, -4.983277591973244, -4.916387959866221, -4.849498327759197, -4.782608695652174, -4.7157190635451505, -4.648829431438127, -4.581939799331104, -4.51505016722408, -4.448160535117057, -4.381270903010034, -4.31438127090301, -4.247491638795987, -4.1806020066889635, -4.11371237458194, -4.046822742474917, -3.9799331103678934, -3.91304347826087, -3.8461538461538467, -3.7792642140468233, -3.7123745819398, -3.6454849498327766, -3.5785953177257532, -3.511705685618729, -3.4448160535117056, -3.3779264214046822, -3.311036789297659, -3.2441471571906355, -3.177257525083612, -3.1103678929765888, -3.0434782608695654, -2.976588628762542, -2.9096989966555187, -2.8428093645484953, -2.775919732441472, -2.7090301003344486, -2.642140468227425, -2.575250836120402, -2.5083612040133785, -2.441471571906355, -2.3745819397993317, -2.3076923076923084, -2.240802675585285, -2.1739130434782616, -2.1070234113712374, -2.040133779264214, -1.9732441471571907, -1.9063545150501682, -1.839464882943144, -1.7725752508361214, -1.7056856187290972, -1.6387959866220747, -1.5719063545150505, -1.505016722408028, -1.4381270903010037, -1.3712374581939795, -1.304347826086957, -1.2374581939799327, -1.1705685618729103, -1.103678929765886, -1.0367892976588635, -0.9698996655518393, -0.9030100334448168, -0.8361204013377925, -0.76923076923077, -0.7023411371237458, -0.6354515050167233, -0.5685618729096991, -0.5016722408026766, -0.43478260869565233, -0.36789297658862985, -0.3010033444816056, -0.23411371237458312, -0.16722408026755886, -0.10033444816053638, -0.03344481605351213, 0.03344481605351213, 0.1003344481605346, 0.16722408026755886, 0.23411371237458134, 0.3010033444816056, 0.3678929765886281, 0.43478260869565233, 0.5016722408026748, 0.5685618729096991, 0.6354515050167215, 0.7023411371237458, 0.7692307692307683, 0.8361204013377925, 0.903010033444815, 0.9698996655518393, 1.0367892976588617, 1.103678929765886, 1.1705685618729085, 1.2374581939799327, 1.3043478260869552, 1.3712374581939795, 1.4381270903010037, 1.5050167224080262, 1.5719063545150505, 1.638795986622073, 1.7056856187290972, 1.7725752508361197, 1.839464882943144, 1.9063545150501664, 1.9732441471571907, 2.040133779264213, 2.1070234113712374, 2.17391304347826, 2.240802675585284, 2.3076923076923066, 2.374581939799331, 2.4414715719063533, 2.5083612040133776, 2.5752508361204, 2.6421404682274243, 2.709030100334447, 2.775919732441471, 2.8428093645484935, 2.909698996655518, 2.976588628762542, 3.0434782608695645, 3.1103678929765888, 3.1772575250836113, 3.2441471571906355, 3.311036789297658, 3.3779264214046822, 3.4448160535117047, 3.511705685618729, 3.5785953177257515, 3.6454849498327757, 3.712374581939798, 3.7792642140468224, 3.846153846153845, 3.913043478260869, 3.9799331103678917, 4.046822742474916, 4.113712374581938, 4.180602006688963, 4.247491638795985, 4.314381270903009, 4.381270903010034, 4.448160535117056, 4.51505016722408, 4.581939799331103, 4.648829431438127, 4.71571906354515, 4.782608695652174, 4.849498327759196, 4.916387959866221, 4.983277591973243, 5.050167224080267, 5.11705685618729, 5.183946488294314, 5.2508361204013365, 5.317725752508361, 5.384615384615383, 5.4515050167224075, 5.51839464882943, 5.585284280936454, 5.652173913043477, 5.719063545150501, 5.785953177257525, 5.852842809364548, 5.919732441471572, 5.986622073578594, 6.053511705685619, 6.120401337792643, 6.187290969899664, 6.254180602006688, 6.321070234113712, 6.387959866220736, 6.454849498327757, 6.521739130434781, 6.588628762541806, 6.65551839464883, 6.722408026755851, 6.789297658862875, 6.856187290969899, 6.923076923076923, 6.989966555183944, 7.056856187290968, 7.123745819397993, 7.190635451505017, 7.257525083612041, 7.324414715719062, 7.391304347826086, 7.45819397993311, 7.5250836120401345, 7.591973244147155, 7.6588628762541795, 7.725752508361204, 7.792642140468228, 7.859531772575249, 7.926421404682273, 7.993311036789297, 8.060200668896321, 8.127090301003342, 8.193979933110366, 8.26086956521739, 8.327759197324415, 8.394648829431436, 8.46153846153846, 8.528428093645484, 8.595317725752508, 8.662207357859533, 8.729096989966553, 8.795986622073578, 8.862876254180602, 8.929765886287626, 8.996655518394647, 9.063545150501671, 9.130434782608695, 9.19732441471572, 9.26421404682274, 9.331103678929765, 9.397993311036789, 9.464882943143813, 9.531772575250834, 9.598662207357858, 9.665551839464882, 9.732441471571907, 9.799331103678927, 9.866220735785951, 9.933110367892976, 10.0];
    let output03_expect = [-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7];

    let type0 = {type: nn.TENSOR_FLOAT32, dimensions: [300]};
    let type0_length = product(type0.dimensions);
    let type17 = {type: nn.TENSOR_QUANT8_ASYMM_SIGNED, dimensions: [300], scale: 10.0, zeroPoint: -8};
    let type17_length = product(type17.dimensions);

    let input03 = operandIndex++;
    model.addOperand(type0);
    let output03 = operandIndex++;
    model.addOperand(type17);

    model.addOperation(nn.QUANTIZE, [input03], [output03]);

    model.identifyInputsAndOutputs([input03], [output03]);
    await model.finish();

    let compilation = await model.createCompilation();
    compilation.setPreference(getPreferenceCode(options.prefer));
    await compilation.finish();

    let execution = await compilation.createExecution();

    let input03_input = new Float32Array(input03_value);
    execution.setInput(0, input03_input);
    let output03_output = new Int8Array(type17_length);
    execution.setOutput(0, output03_output);

    await execution.startCompute();

    for (let i = 0; i < type17_length; ++i) {
      assert.isTrue(almostEqualCTSQuant8(output03_output[i], output03_expect[i]));
    }
  });

  it('check result for Quantize quant8 signed example-5', async function() {
    // For 'Quantize quant8 signed' example: examples_float32_5
    let model = await nn.createModel(options);
    let operandIndex = 0;

    let input04_value = [-10.0, -9.933110367892976, -9.866220735785953, -9.799331103678929, -9.732441471571907, -9.665551839464882, -9.59866220735786, -9.531772575250836, -9.464882943143813, -9.397993311036789, -9.331103678929766, -9.264214046822742, -9.19732441471572, -9.130434782608695, -9.063545150501673, -8.996655518394649, -8.929765886287626, -8.862876254180602, -8.79598662207358, -8.729096989966555, -8.662207357859533, -8.595317725752508, -8.528428093645484, -8.461538461538462, -8.39464882943144, -8.327759197324415, -8.26086956521739, -8.193979933110368, -8.127090301003344, -8.060200668896321, -7.993311036789297, -7.926421404682275, -7.8595317725752505, -7.792642140468228, -7.725752508361204, -7.658862876254181, -7.591973244147157, -7.5250836120401345, -7.45819397993311, -7.391304347826087, -7.3244147157190636, -7.25752508361204, -7.190635451505017, -7.1237458193979935, -7.05685618729097, -6.989966555183947, -6.923076923076923, -6.8561872909699, -6.789297658862877, -6.722408026755852, -6.65551839464883, -6.588628762541806, -6.521739130434783, -6.454849498327759, -6.387959866220736, -6.321070234113712, -6.25418060200669, -6.187290969899665, -6.120401337792643, -6.053511705685619, -5.986622073578595, -5.919732441471572, -5.852842809364549, -5.785953177257525, -5.719063545150502, -5.6521739130434785, -5.585284280936455, -5.518394648829432, -5.451505016722408, -5.384615384615385, -5.317725752508362, -5.250836120401338, -5.183946488294315, -5.117056856187292, -5.050167224080268, -4.983277591973244, -4.916387959866221, -4.849498327759197, -4.782608695652174, -4.7157190635451505, -4.648829431438127, -4.581939799331104, -4.51505016722408, -4.448160535117057, -4.381270903010034, -4.31438127090301, -4.247491638795987, -4.1806020066889635, -4.11371237458194, -4.046822742474917, -3.9799331103678934, -3.91304347826087, -3.8461538461538467, -3.7792642140468233, -3.7123745819398, -3.6454849498327766, -3.5785953177257532, -3.511705685618729, -3.4448160535117056, -3.3779264214046822, -3.311036789297659, -3.2441471571906355, -3.177257525083612, -3.1103678929765888, -3.0434782608695654, -2.976588628762542, -2.9096989966555187, -2.8428093645484953, -2.775919732441472, -2.7090301003344486, -2.642140468227425, -2.575250836120402, -2.5083612040133785, -2.441471571906355, -2.3745819397993317, -2.3076923076923084, -2.240802675585285, -2.1739130434782616, -2.1070234113712374, -2.040133779264214, -1.9732441471571907, -1.9063545150501682, -1.839464882943144, -1.7725752508361214, -1.7056856187290972, -1.6387959866220747, -1.5719063545150505, -1.505016722408028, -1.4381270903010037, -1.3712374581939795, -1.304347826086957, -1.2374581939799327, -1.1705685618729103, -1.103678929765886, -1.0367892976588635, -0.9698996655518393, -0.9030100334448168, -0.8361204013377925, -0.76923076923077, -0.7023411371237458, -0.6354515050167233, -0.5685618729096991, -0.5016722408026766, -0.43478260869565233, -0.36789297658862985, -0.3010033444816056, -0.23411371237458312, -0.16722408026755886, -0.10033444816053638, -0.03344481605351213, 0.03344481605351213, 0.1003344481605346, 0.16722408026755886, 0.23411371237458134, 0.3010033444816056, 0.3678929765886281, 0.43478260869565233, 0.5016722408026748, 0.5685618729096991, 0.6354515050167215, 0.7023411371237458, 0.7692307692307683, 0.8361204013377925, 0.903010033444815, 0.9698996655518393, 1.0367892976588617, 1.103678929765886, 1.1705685618729085, 1.2374581939799327, 1.3043478260869552, 1.3712374581939795, 1.4381270903010037, 1.5050167224080262, 1.5719063545150505, 1.638795986622073, 1.7056856187290972, 1.7725752508361197, 1.839464882943144, 1.9063545150501664, 1.9732441471571907, 2.040133779264213, 2.1070234113712374, 2.17391304347826, 2.240802675585284, 2.3076923076923066, 2.374581939799331, 2.4414715719063533, 2.5083612040133776, 2.5752508361204, 2.6421404682274243, 2.709030100334447, 2.775919732441471, 2.8428093645484935, 2.909698996655518, 2.976588628762542, 3.0434782608695645, 3.1103678929765888, 3.1772575250836113, 3.2441471571906355, 3.311036789297658, 3.3779264214046822, 3.4448160535117047, 3.511705685618729, 3.5785953177257515, 3.6454849498327757, 3.712374581939798, 3.7792642140468224, 3.846153846153845, 3.913043478260869, 3.9799331103678917, 4.046822742474916, 4.113712374581938, 4.180602006688963, 4.247491638795985, 4.314381270903009, 4.381270903010034, 4.448160535117056, 4.51505016722408, 4.581939799331103, 4.648829431438127, 4.71571906354515, 4.782608695652174, 4.849498327759196, 4.916387959866221, 4.983277591973243, 5.050167224080267, 5.11705685618729, 5.183946488294314, 5.2508361204013365, 5.317725752508361, 5.384615384615383, 5.4515050167224075, 5.51839464882943, 5.585284280936454, 5.652173913043477, 5.719063545150501, 5.785953177257525, 5.852842809364548, 5.919732441471572, 5.986622073578594, 6.053511705685619, 6.120401337792643, 6.187290969899664, 6.254180602006688, 6.321070234113712, 6.387959866220736, 6.454849498327757, 6.521739130434781, 6.588628762541806, 6.65551839464883, 6.722408026755851, 6.789297658862875, 6.856187290969899, 6.923076923076923, 6.989966555183944, 7.056856187290968, 7.123745819397993, 7.190635451505017, 7.257525083612041, 7.324414715719062, 7.391304347826086, 7.45819397993311, 7.5250836120401345, 7.591973244147155, 7.6588628762541795, 7.725752508361204, 7.792642140468228, 7.859531772575249, 7.926421404682273, 7.993311036789297, 8.060200668896321, 8.127090301003342, 8.193979933110366, 8.26086956521739, 8.327759197324415, 8.394648829431436, 8.46153846153846, 8.528428093645484, 8.595317725752508, 8.662207357859533, 8.729096989966553, 8.795986622073578, 8.862876254180602, 8.929765886287626, 8.996655518394647, 9.063545150501671, 9.130434782608695, 9.19732441471572, 9.26421404682274, 9.331103678929765, 9.397993311036789, 9.464882943143813, 9.531772575250834, 9.598662207357858, 9.665551839464882, 9.732441471571907, 9.799331103678927, 9.866220735785951, 9.933110367892976, 10.0];
    let output04_expect = [-128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -128, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -127, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -126, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -125, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -124, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -123, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -122, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -121, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -120, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -119, -118, -118, -118, -118, -118, -118, -118, -118];

    let type1 = {type: nn.TENSOR_FLOAT32, dimensions: [300]};
    let type1_length = product(type1.dimensions);
    let type14 = {type: nn.TENSOR_QUANT8_ASYMM_SIGNED, dimensions: [300], scale: 1.0, zeroPoint: -128};
    let type14_length = product(type14.dimensions);

    let input04 = operandIndex++;
    model.addOperand(type1);
    let output04 = operandIndex++;
    model.addOperand(type14);

    model.addOperation(nn.QUANTIZE, [input04], [output04]);

    model.identifyInputsAndOutputs([input04], [output04]);
    await model.finish();

    let compilation = await model.createCompilation();
    compilation.setPreference(getPreferenceCode(options.prefer));
    await compilation.finish();

    let execution = await compilation.createExecution();

    let input04_input = new Float32Array(input04_value);
    execution.setInput(0, input04_input);
    let output04_output = new Int8Array(type14_length);
    execution.setOutput(0, output04_output);

    await execution.startCompute();

    for (let i = 0; i < type14_length; ++i) {
      assert.isTrue(almostEqualCTSQuant8(output04_output[i], output04_expect[i]));
    }
  });

  it('check result for Quantize quant8 signed example-6', async function() {
    // For 'Quantize quant8 signed' example: examples_float32_6
    let model = await nn.createModel(options);
    let operandIndex = 0;

    let input05_value = [-10.0, -9.933110367892976, -9.866220735785953, -9.799331103678929, -9.732441471571907, -9.665551839464882, -9.59866220735786, -9.531772575250836, -9.464882943143813, -9.397993311036789, -9.331103678929766, -9.264214046822742, -9.19732441471572, -9.130434782608695, -9.063545150501673, -8.996655518394649, -8.929765886287626, -8.862876254180602, -8.79598662207358, -8.729096989966555, -8.662207357859533, -8.595317725752508, -8.528428093645484, -8.461538461538462, -8.39464882943144, -8.327759197324415, -8.26086956521739, -8.193979933110368, -8.127090301003344, -8.060200668896321, -7.993311036789297, -7.926421404682275, -7.8595317725752505, -7.792642140468228, -7.725752508361204, -7.658862876254181, -7.591973244147157, -7.5250836120401345, -7.45819397993311, -7.391304347826087, -7.3244147157190636, -7.25752508361204, -7.190635451505017, -7.1237458193979935, -7.05685618729097, -6.989966555183947, -6.923076923076923, -6.8561872909699, -6.789297658862877, -6.722408026755852, -6.65551839464883, -6.588628762541806, -6.521739130434783, -6.454849498327759, -6.387959866220736, -6.321070234113712, -6.25418060200669, -6.187290969899665, -6.120401337792643, -6.053511705685619, -5.986622073578595, -5.919732441471572, -5.852842809364549, -5.785953177257525, -5.719063545150502, -5.6521739130434785, -5.585284280936455, -5.518394648829432, -5.451505016722408, -5.384615384615385, -5.317725752508362, -5.250836120401338, -5.183946488294315, -5.117056856187292, -5.050167224080268, -4.983277591973244, -4.916387959866221, -4.849498327759197, -4.782608695652174, -4.7157190635451505, -4.648829431438127, -4.581939799331104, -4.51505016722408, -4.448160535117057, -4.381270903010034, -4.31438127090301, -4.247491638795987, -4.1806020066889635, -4.11371237458194, -4.046822742474917, -3.9799331103678934, -3.91304347826087, -3.8461538461538467, -3.7792642140468233, -3.7123745819398, -3.6454849498327766, -3.5785953177257532, -3.511705685618729, -3.4448160535117056, -3.3779264214046822, -3.311036789297659, -3.2441471571906355, -3.177257525083612, -3.1103678929765888, -3.0434782608695654, -2.976588628762542, -2.9096989966555187, -2.8428093645484953, -2.775919732441472, -2.7090301003344486, -2.642140468227425, -2.575250836120402, -2.5083612040133785, -2.441471571906355, -2.3745819397993317, -2.3076923076923084, -2.240802675585285, -2.1739130434782616, -2.1070234113712374, -2.040133779264214, -1.9732441471571907, -1.9063545150501682, -1.839464882943144, -1.7725752508361214, -1.7056856187290972, -1.6387959866220747, -1.5719063545150505, -1.505016722408028, -1.4381270903010037, -1.3712374581939795, -1.304347826086957, -1.2374581939799327, -1.1705685618729103, -1.103678929765886, -1.0367892976588635, -0.9698996655518393, -0.9030100334448168, -0.8361204013377925, -0.76923076923077, -0.7023411371237458, -0.6354515050167233, -0.5685618729096991, -0.5016722408026766, -0.43478260869565233, -0.36789297658862985, -0.3010033444816056, -0.23411371237458312, -0.16722408026755886, -0.10033444816053638, -0.03344481605351213, 0.03344481605351213, 0.1003344481605346, 0.16722408026755886, 0.23411371237458134, 0.3010033444816056, 0.3678929765886281, 0.43478260869565233, 0.5016722408026748, 0.5685618729096991, 0.6354515050167215, 0.7023411371237458, 0.7692307692307683, 0.8361204013377925, 0.903010033444815, 0.9698996655518393, 1.0367892976588617, 1.103678929765886, 1.1705685618729085, 1.2374581939799327, 1.3043478260869552, 1.3712374581939795, 1.4381270903010037, 1.5050167224080262, 1.5719063545150505, 1.638795986622073, 1.7056856187290972, 1.7725752508361197, 1.839464882943144, 1.9063545150501664, 1.9732441471571907, 2.040133779264213, 2.1070234113712374, 2.17391304347826, 2.240802675585284, 2.3076923076923066, 2.374581939799331, 2.4414715719063533, 2.5083612040133776, 2.5752508361204, 2.6421404682274243, 2.709030100334447, 2.775919732441471, 2.8428093645484935, 2.909698996655518, 2.976588628762542, 3.0434782608695645, 3.1103678929765888, 3.1772575250836113, 3.2441471571906355, 3.311036789297658, 3.3779264214046822, 3.4448160535117047, 3.511705685618729, 3.5785953177257515, 3.6454849498327757, 3.712374581939798, 3.7792642140468224, 3.846153846153845, 3.913043478260869, 3.9799331103678917, 4.046822742474916, 4.113712374581938, 4.180602006688963, 4.247491638795985, 4.314381270903009, 4.381270903010034, 4.448160535117056, 4.51505016722408, 4.581939799331103, 4.648829431438127, 4.71571906354515, 4.782608695652174, 4.849498327759196, 4.916387959866221, 4.983277591973243, 5.050167224080267, 5.11705685618729, 5.183946488294314, 5.2508361204013365, 5.317725752508361, 5.384615384615383, 5.4515050167224075, 5.51839464882943, 5.585284280936454, 5.652173913043477, 5.719063545150501, 5.785953177257525, 5.852842809364548, 5.919732441471572, 5.986622073578594, 6.053511705685619, 6.120401337792643, 6.187290969899664, 6.254180602006688, 6.321070234113712, 6.387959866220736, 6.454849498327757, 6.521739130434781, 6.588628762541806, 6.65551839464883, 6.722408026755851, 6.789297658862875, 6.856187290969899, 6.923076923076923, 6.989966555183944, 7.056856187290968, 7.123745819397993, 7.190635451505017, 7.257525083612041, 7.324414715719062, 7.391304347826086, 7.45819397993311, 7.5250836120401345, 7.591973244147155, 7.6588628762541795, 7.725752508361204, 7.792642140468228, 7.859531772575249, 7.926421404682273, 7.993311036789297, 8.060200668896321, 8.127090301003342, 8.193979933110366, 8.26086956521739, 8.327759197324415, 8.394648829431436, 8.46153846153846, 8.528428093645484, 8.595317725752508, 8.662207357859533, 8.729096989966553, 8.795986622073578, 8.862876254180602, 8.929765886287626, 8.996655518394647, 9.063545150501671, 9.130434782608695, 9.19732441471572, 9.26421404682274, 9.331103678929765, 9.397993311036789, 9.464882943143813, 9.531772575250834, 9.598662207357858, 9.665551839464882, 9.732441471571907, 9.799331103678927, 9.866220735785951, 9.933110367892976, 10.0];
    let output05_expect

    let type1 = {type: nn.TENSOR_FLOAT32, dimensions: [300]};
    let type1_length = product(type1.dimensions);
    let type15 = {type: nn.TENSOR_QUANT8_ASYMM_SIGNED, dimensions: [300], scale: 1.0, zeroPoint: -127};
    let type15_length = product(type15.dimensions);

    let input05 = operandIndex++;
    model.addOperand(type1);
    let output05 = operandIndex++;
    model.addOperand(type15);

    model.addOperation(nn.QUANTIZE, [input05], [output05]);

    model.identifyInputsAndOutputs([input05], [output05]);
    await model.finish();

    let compilation = await model.createCompilation();
    compilation.setPreference(getPreferenceCode(options.prefer));
    await compilation.finish();

    let execution = await compilation.createExecution();

    let input05_input = new Float32Array(input05_value);
    execution.setInput(0, input05_input);
    let output05_output = new Int8Array(type15_length);
    execution.setOutput(0, output05_output);

    await execution.startCompute();

    for (let i = 0; i < type15_length; ++i) {
      assert.isTrue(almostEqualCTSQuant8(output05_output[i], output05_expect[i]));
    }
  });

  it('check result for Quantize quant8 signed example-7', async function() {
    // For 'Quantize quant8 signed' example: examples_float32_7
    let model = await nn.createModel(options);
    let operandIndex = 0;

    let input06_value = [-10.0, -9.933110367892976, -9.866220735785953, -9.799331103678929, -9.732441471571907, -9.665551839464882, -9.59866220735786, -9.531772575250836, -9.464882943143813, -9.397993311036789, -9.331103678929766, -9.264214046822742, -9.19732441471572, -9.130434782608695, -9.063545150501673, -8.996655518394649, -8.929765886287626, -8.862876254180602, -8.79598662207358, -8.729096989966555, -8.662207357859533, -8.595317725752508, -8.528428093645484, -8.461538461538462, -8.39464882943144, -8.327759197324415, -8.26086956521739, -8.193979933110368, -8.127090301003344, -8.060200668896321, -7.993311036789297, -7.926421404682275, -7.8595317725752505, -7.792642140468228, -7.725752508361204, -7.658862876254181, -7.591973244147157, -7.5250836120401345, -7.45819397993311, -7.391304347826087, -7.3244147157190636, -7.25752508361204, -7.190635451505017, -7.1237458193979935, -7.05685618729097, -6.989966555183947, -6.923076923076923, -6.8561872909699, -6.789297658862877, -6.722408026755852, -6.65551839464883, -6.588628762541806, -6.521739130434783, -6.454849498327759, -6.387959866220736, -6.321070234113712, -6.25418060200669, -6.187290969899665, -6.120401337792643, -6.053511705685619, -5.986622073578595, -5.919732441471572, -5.852842809364549, -5.785953177257525, -5.719063545150502, -5.6521739130434785, -5.585284280936455, -5.518394648829432, -5.451505016722408, -5.384615384615385, -5.317725752508362, -5.250836120401338, -5.183946488294315, -5.117056856187292, -5.050167224080268, -4.983277591973244, -4.916387959866221, -4.849498327759197, -4.782608695652174, -4.7157190635451505, -4.648829431438127, -4.581939799331104, -4.51505016722408, -4.448160535117057, -4.381270903010034, -4.31438127090301, -4.247491638795987, -4.1806020066889635, -4.11371237458194, -4.046822742474917, -3.9799331103678934, -3.91304347826087, -3.8461538461538467, -3.7792642140468233, -3.7123745819398, -3.6454849498327766, -3.5785953177257532, -3.511705685618729, -3.4448160535117056, -3.3779264214046822, -3.311036789297659, -3.2441471571906355, -3.177257525083612, -3.1103678929765888, -3.0434782608695654, -2.976588628762542, -2.9096989966555187, -2.8428093645484953, -2.775919732441472, -2.7090301003344486, -2.642140468227425, -2.575250836120402, -2.5083612040133785, -2.441471571906355, -2.3745819397993317, -2.3076923076923084, -2.240802675585285, -2.1739130434782616, -2.1070234113712374, -2.040133779264214, -1.9732441471571907, -1.9063545150501682, -1.839464882943144, -1.7725752508361214, -1.7056856187290972, -1.6387959866220747, -1.5719063545150505, -1.505016722408028, -1.4381270903010037, -1.3712374581939795, -1.304347826086957, -1.2374581939799327, -1.1705685618729103, -1.103678929765886, -1.0367892976588635, -0.9698996655518393, -0.9030100334448168, -0.8361204013377925, -0.76923076923077, -0.7023411371237458, -0.6354515050167233, -0.5685618729096991, -0.5016722408026766, -0.43478260869565233, -0.36789297658862985, -0.3010033444816056, -0.23411371237458312, -0.16722408026755886, -0.10033444816053638, -0.03344481605351213, 0.03344481605351213, 0.1003344481605346, 0.16722408026755886, 0.23411371237458134, 0.3010033444816056, 0.3678929765886281, 0.43478260869565233, 0.5016722408026748, 0.5685618729096991, 0.6354515050167215, 0.7023411371237458, 0.7692307692307683, 0.8361204013377925, 0.903010033444815, 0.9698996655518393, 1.0367892976588617, 1.103678929765886, 1.1705685618729085, 1.2374581939799327, 1.3043478260869552, 1.3712374581939795, 1.4381270903010037, 1.5050167224080262, 1.5719063545150505, 1.638795986622073, 1.7056856187290972, 1.7725752508361197, 1.839464882943144, 1.9063545150501664, 1.9732441471571907, 2.040133779264213, 2.1070234113712374, 2.17391304347826, 2.240802675585284, 2.3076923076923066, 2.374581939799331, 2.4414715719063533, 2.5083612040133776, 2.5752508361204, 2.6421404682274243, 2.709030100334447, 2.775919732441471, 2.8428093645484935, 2.909698996655518, 2.976588628762542, 3.0434782608695645, 3.1103678929765888, 3.1772575250836113, 3.2441471571906355, 3.311036789297658, 3.3779264214046822, 3.4448160535117047, 3.511705685618729, 3.5785953177257515, 3.6454849498327757, 3.712374581939798, 3.7792642140468224, 3.846153846153845, 3.913043478260869, 3.9799331103678917, 4.046822742474916, 4.113712374581938, 4.180602006688963, 4.247491638795985, 4.314381270903009, 4.381270903010034, 4.448160535117056, 4.51505016722408, 4.581939799331103, 4.648829431438127, 4.71571906354515, 4.782608695652174, 4.849498327759196, 4.916387959866221, 4.983277591973243, 5.050167224080267, 5.11705685618729, 5.183946488294314, 5.2508361204013365, 5.317725752508361, 5.384615384615383, 5.4515050167224075, 5.51839464882943, 5.585284280936454, 5.652173913043477, 5.719063545150501, 5.785953177257525, 5.852842809364548, 5.919732441471572, 5.986622073578594, 6.053511705685619, 6.120401337792643, 6.187290969899664, 6.254180602006688, 6.321070234113712, 6.387959866220736, 6.454849498327757, 6.521739130434781, 6.588628762541806, 6.65551839464883, 6.722408026755851, 6.789297658862875, 6.856187290969899, 6.923076923076923, 6.989966555183944, 7.056856187290968, 7.123745819397993, 7.190635451505017, 7.257525083612041, 7.324414715719062, 7.391304347826086, 7.45819397993311, 7.5250836120401345, 7.591973244147155, 7.6588628762541795, 7.725752508361204, 7.792642140468228, 7.859531772575249, 7.926421404682273, 7.993311036789297, 8.060200668896321, 8.127090301003342, 8.193979933110366, 8.26086956521739, 8.327759197324415, 8.394648829431436, 8.46153846153846, 8.528428093645484, 8.595317725752508, 8.662207357859533, 8.729096989966553, 8.795986622073578, 8.862876254180602, 8.929765886287626, 8.996655518394647, 9.063545150501671, 9.130434782608695, 9.19732441471572, 9.26421404682274, 9.331103678929765, 9.397993311036789, 9.464882943143813, 9.531772575250834, 9.598662207357858, 9.665551839464882, 9.732441471571907, 9.799331103678927, 9.866220735785951, 9.933110367892976, 10.0];
    let output06_expect

    let type1 = {type: nn.TENSOR_FLOAT32, dimensions: [300]};
    let type1_length = product(type1.dimensions);
    let type16 = {type: nn.TENSOR_QUANT8_ASYMM_SIGNED, dimensions: [300], scale: 0.01, zeroPoint: -8};
    let type16_length = product(type16.dimensions);

    let input06 = operandIndex++;
    model.addOperand(type1);
    let output06 = operandIndex++;
    model.addOperand(type16);

    model.addOperation(nn.QUANTIZE, [input06], [output06]);

    model.identifyInputsAndOutputs([input06], [output06]);
    await model.finish();

    let compilation = await model.createCompilation();
    compilation.setPreference(getPreferenceCode(options.prefer));
    await compilation.finish();

    let execution = await compilation.createExecution();

    let input06_input = new Float32Array(input06_value);
    execution.setInput(0, input06_input);
    let output06_output = new Int8Array(type16_length);
    execution.setOutput(0, output06_output);

    await execution.startCompute();

    for (let i = 0; i < type16_length; ++i) {
      assert.isTrue(almostEqualCTSQuant8(output06_output[i], output06_expect[i]));
    }
  });

  it('check result for Quantize quant8 signed example-8', async function() {
    // For 'Quantize quant8 signed' example: examples_float32_8
    let model = await nn.createModel(options);
    let operandIndex = 0;

    let input07_value = [-10.0, -9.933110367892976, -9.866220735785953, -9.799331103678929, -9.732441471571907, -9.665551839464882, -9.59866220735786, -9.531772575250836, -9.464882943143813, -9.397993311036789, -9.331103678929766, -9.264214046822742, -9.19732441471572, -9.130434782608695, -9.063545150501673, -8.996655518394649, -8.929765886287626, -8.862876254180602, -8.79598662207358, -8.729096989966555, -8.662207357859533, -8.595317725752508, -8.528428093645484, -8.461538461538462, -8.39464882943144, -8.327759197324415, -8.26086956521739, -8.193979933110368, -8.127090301003344, -8.060200668896321, -7.993311036789297, -7.926421404682275, -7.8595317725752505, -7.792642140468228, -7.725752508361204, -7.658862876254181, -7.591973244147157, -7.5250836120401345, -7.45819397993311, -7.391304347826087, -7.3244147157190636, -7.25752508361204, -7.190635451505017, -7.1237458193979935, -7.05685618729097, -6.989966555183947, -6.923076923076923, -6.8561872909699, -6.789297658862877, -6.722408026755852, -6.65551839464883, -6.588628762541806, -6.521739130434783, -6.454849498327759, -6.387959866220736, -6.321070234113712, -6.25418060200669, -6.187290969899665, -6.120401337792643, -6.053511705685619, -5.986622073578595, -5.919732441471572, -5.852842809364549, -5.785953177257525, -5.719063545150502, -5.6521739130434785, -5.585284280936455, -5.518394648829432, -5.451505016722408, -5.384615384615385, -5.317725752508362, -5.250836120401338, -5.183946488294315, -5.117056856187292, -5.050167224080268, -4.983277591973244, -4.916387959866221, -4.849498327759197, -4.782608695652174, -4.7157190635451505, -4.648829431438127, -4.581939799331104, -4.51505016722408, -4.448160535117057, -4.381270903010034, -4.31438127090301, -4.247491638795987, -4.1806020066889635, -4.11371237458194, -4.046822742474917, -3.9799331103678934, -3.91304347826087, -3.8461538461538467, -3.7792642140468233, -3.7123745819398, -3.6454849498327766, -3.5785953177257532, -3.511705685618729, -3.4448160535117056, -3.3779264214046822, -3.311036789297659, -3.2441471571906355, -3.177257525083612, -3.1103678929765888, -3.0434782608695654, -2.976588628762542, -2.9096989966555187, -2.8428093645484953, -2.775919732441472, -2.7090301003344486, -2.642140468227425, -2.575250836120402, -2.5083612040133785, -2.441471571906355, -2.3745819397993317, -2.3076923076923084, -2.240802675585285, -2.1739130434782616, -2.1070234113712374, -2.040133779264214, -1.9732441471571907, -1.9063545150501682, -1.839464882943144, -1.7725752508361214, -1.7056856187290972, -1.6387959866220747, -1.5719063545150505, -1.505016722408028, -1.4381270903010037, -1.3712374581939795, -1.304347826086957, -1.2374581939799327, -1.1705685618729103, -1.103678929765886, -1.0367892976588635, -0.9698996655518393, -0.9030100334448168, -0.8361204013377925, -0.76923076923077, -0.7023411371237458, -0.6354515050167233, -0.5685618729096991, -0.5016722408026766, -0.43478260869565233, -0.36789297658862985, -0.3010033444816056, -0.23411371237458312, -0.16722408026755886, -0.10033444816053638, -0.03344481605351213, 0.03344481605351213, 0.1003344481605346, 0.16722408026755886, 0.23411371237458134, 0.3010033444816056, 0.3678929765886281, 0.43478260869565233, 0.5016722408026748, 0.5685618729096991, 0.6354515050167215, 0.7023411371237458, 0.7692307692307683, 0.8361204013377925, 0.903010033444815, 0.9698996655518393, 1.0367892976588617, 1.103678929765886, 1.1705685618729085, 1.2374581939799327, 1.3043478260869552, 1.3712374581939795, 1.4381270903010037, 1.5050167224080262, 1.5719063545150505, 1.638795986622073, 1.7056856187290972, 1.7725752508361197, 1.839464882943144, 1.9063545150501664, 1.9732441471571907, 2.040133779264213, 2.1070234113712374, 2.17391304347826, 2.240802675585284, 2.3076923076923066, 2.374581939799331, 2.4414715719063533, 2.5083612040133776, 2.5752508361204, 2.6421404682274243, 2.709030100334447, 2.775919732441471, 2.8428093645484935, 2.909698996655518, 2.976588628762542, 3.0434782608695645, 3.1103678929765888, 3.1772575250836113, 3.2441471571906355, 3.311036789297658, 3.3779264214046822, 3.4448160535117047, 3.511705685618729, 3.5785953177257515, 3.6454849498327757, 3.712374581939798, 3.7792642140468224, 3.846153846153845, 3.913043478260869, 3.9799331103678917, 4.046822742474916, 4.113712374581938, 4.180602006688963, 4.247491638795985, 4.314381270903009, 4.381270903010034, 4.448160535117056, 4.51505016722408, 4.581939799331103, 4.648829431438127, 4.71571906354515, 4.782608695652174, 4.849498327759196, 4.916387959866221, 4.983277591973243, 5.050167224080267, 5.11705685618729, 5.183946488294314, 5.2508361204013365, 5.317725752508361, 5.384615384615383, 5.4515050167224075, 5.51839464882943, 5.585284280936454, 5.652173913043477, 5.719063545150501, 5.785953177257525, 5.852842809364548, 5.919732441471572, 5.986622073578594, 6.053511705685619, 6.120401337792643, 6.187290969899664, 6.254180602006688, 6.321070234113712, 6.387959866220736, 6.454849498327757, 6.521739130434781, 6.588628762541806, 6.65551839464883, 6.722408026755851, 6.789297658862875, 6.856187290969899, 6.923076923076923, 6.989966555183944, 7.056856187290968, 7.123745819397993, 7.190635451505017, 7.257525083612041, 7.324414715719062, 7.391304347826086, 7.45819397993311, 7.5250836120401345, 7.591973244147155, 7.6588628762541795, 7.725752508361204, 7.792642140468228, 7.859531772575249, 7.926421404682273, 7.993311036789297, 8.060200668896321, 8.127090301003342, 8.193979933110366, 8.26086956521739, 8.327759197324415, 8.394648829431436, 8.46153846153846, 8.528428093645484, 8.595317725752508, 8.662207357859533, 8.729096989966553, 8.795986622073578, 8.862876254180602, 8.929765886287626, 8.996655518394647, 9.063545150501671, 9.130434782608695, 9.19732441471572, 9.26421404682274, 9.331103678929765, 9.397993311036789, 9.464882943143813, 9.531772575250834, 9.598662207357858, 9.665551839464882, 9.732441471571907, 9.799331103678927, 9.866220735785951, 9.933110367892976, 10.0];
    let output07_expect = [-9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -8, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7, -7];

    let type1 = {type: nn.TENSOR_FLOAT32, dimensions: [300]};
    let type1_length = product(type1.dimensions);
    let type17 = {type: nn.TENSOR_QUANT8_ASYMM_SIGNED, dimensions: [300], scale: 10.0, zeroPoint: -8};
    let type17_length = product(type17.dimensions);

    let input07 = operandIndex++;
    model.addOperand(type1);
    let output07 = operandIndex++;
    model.addOperand(type17);

    model.addOperation(nn.QUANTIZE, [input07], [output07]);

    model.identifyInputsAndOutputs([input07], [output07]);
    await model.finish();

    let compilation = await model.createCompilation();
    compilation.setPreference(getPreferenceCode(options.prefer));
    await compilation.finish();

    let execution = await compilation.createExecution();

    let input07_input = new Float32Array(input07_value);
    execution.setInput(0, input07_input);
    let output07_output = new Int8Array(type17_length);
    execution.setOutput(0, output07_output);

    await execution.startCompute();

    for (let i = 0; i < type17_length; ++i) {
      assert.isTrue(almostEqualCTSQuant8(output07_output[i], output07_expect[i]));
    }
  });
});
